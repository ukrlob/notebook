# üìù Google Apps Script –∫–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets

## üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:

### 1. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π Google Apps Script:
1. –û—Ç–∫—Ä–æ–π—Ç–µ [Google Apps Script](https://script.google.com)
2. –ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"
3. –£–¥–∞–ª–∏—Ç–µ –≤–µ—Å—å –∫–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
4. **–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ `google-apps-script-clean.txt`** (—Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π –∫–æ–¥!)

### 2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É:
1. –í –∫–æ–¥–µ –Ω–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: `const SPREADSHEET_ID = '1z5Ls-vyGt45JBCf_8_MLd-bjs5OuTEKKZ8SZyG9qpjo';`
2. –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞: `const SHEET_NAME = '–ó–∞–ø–∏—Å–∏';`

### 3. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
1. –ù–∞–∂–º–∏—Ç–µ "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å" ‚Üí "–ù–æ–≤–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
2. –¢–∏–ø: "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
3. –û–ø–∏—Å–∞–Ω–∏–µ: "My Thoughts App"
4. –í—ã–ø–æ–ª–Ω—è—Ç—å –∫–∞–∫: "–Ø"
5. –î–æ—Å—Ç—É–ø: "–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö"
6. –ù–∞–∂–º–∏—Ç–µ "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
7. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ app.js

### 4. –û–±–Ω–æ–≤–∏—Ç–µ app.js:
–ó–∞–º–µ–Ω–∏—Ç–µ URL –≤ —Ñ—É–Ω–∫—Ü–∏–∏ exportToGoogleSheets() –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π URL

---

## ‚ö†Ô∏è –í–ê–ñ–ù–û: 
**–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª `google-apps-script-clean.txt` –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞!**
–û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JavaScript –∫–æ–¥ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.

---

## üìã –ü–æ–ª–Ω—ã–π –∫–æ–¥ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):

function doPost(e) {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω POST –∑–∞–ø—Ä–æ—Å');
    console.log('–î–∞–Ω–Ω—ã–µ:', e.postData.contents);
    
    const data = JSON.parse(e.postData.contents);
    console.log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
    
    const spreadsheetId = '1z5Ls-vyGt45JBCf_8_MLd-bjs5OuTEKKZ8SZyG9qpjo';
    console.log('–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å ID:', spreadsheetId);
    
    const spreadsheet = SpreadsheetApp.openById(spreadsheetId);
    const sheet = spreadsheet.getActiveSheet();
    console.log('–õ–∏—Å—Ç –æ—Ç–∫—Ä—ã—Ç:', sheet.getName());
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
    if (sheet.getLastRow() === 0) {
      console.log('–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏');
      sheet.getRange(1, 1, 1, 4).setValues([['–¢–∏–ø', '–¢–µ–∫—Å—Ç', '–î–∞—Ç–∞', '–°—Ç–∞—Ç—É—Å']]);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const existingData = sheet.getDataRange().getValues();
    console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', existingData.length, '—Å—Ç—Ä–æ–∫');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã
    const newData = [];
    data.forEach((row, index) => {
      const isDuplicate = existingData.some(existingRow => {
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–∫—Å—Ç—É (–≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç) - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        return existingRow[1] === row[1];
      });
      
      if (!isDuplicate) {
        console.log('–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É:', row);
        newData.push(row);
      } else {
        console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–æ —Ç–µ–∫—Å—Ç—É:', row[1]);
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (newData.length > 0) {
      const lastRow = sheet.getLastRow() + 1;
      console.log('–î–æ–±–∞–≤–ª—è–µ–º', newData.length, '–Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏:', lastRow);
      newData.forEach((row, index) => {
        sheet.getRange(lastRow + index, 1, 1, 4).setValues([row]);
      });
    } else {
      console.log('–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }
    
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    return ContentService.createTextOutput(JSON.stringify({
      success: true, 
      added: newData.length, 
      skipped: data.length - newData.length
    }))
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders({
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
      });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    return ContentService.createTextOutput(JSON.stringify({error: error.toString()}))
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders({
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
      });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –í–ê–ñ–ù–û!
function doGet() {
  return ContentService.createTextOutput('–°–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
function doOptions(e) {
  return ContentService.createTextOutput('')
    .setMimeType(ContentService.MimeType.TEXT)
    .setHeaders({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type'
    });
}

4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ (Ctrl+S)
5. –ù–∞–∂–º–∏—Ç–µ "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å" ‚Üí "–ù–æ–≤—ã–π —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"
6. –í—ã–±–µ—Ä–∏—Ç–µ "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
7. –î–æ—Å—Ç—É–ø: "–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö" ‚ö†Ô∏è –í–ê–ñ–ù–û!
8. –ù–∞–∂–º–∏—Ç–µ "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å"
9. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

‚ö†Ô∏è –í–ê–ñ–ù–û: –î–æ—Å—Ç—É–ø –î–û–õ–ñ–ï–ù –±—ã—Ç—å "–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—Å–µ—Ö"!