function doPost(e) {
  try {
    console.log('Получен POST запрос');
    console.log('Данные:', e.postData.contents);
    
    const data = JSON.parse(e.postData.contents);
    console.log('Распарсенные данные:', data);
    
    const SPREADSHEET_ID = '1z5Ls-vyGt45JBCf_8_MLd-bjs5OuTEKKZ8SZyG9qpjo';
    const SHEET_NAME = 'Записи';
    
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    let sheet = spreadsheet.getSheetByName(SHEET_NAME);
    
    if (!sheet) {
      sheet = spreadsheet.insertSheet(SHEET_NAME);
      sheet.getRange(1, 1, 1, 4).setValues([['Тип', 'Текст', 'Дата', 'Статус']]);
    }
    
    console.log('Лист найден:', sheet.getName());
    
    // Получаем существующие данные для проверки дубликатов
    const existingData = sheet.getDataRange().getValues();
    console.log('Существующие данные:', existingData.length, 'строк');
    
    // Фильтруем новые данные, исключая дубликаты
    const newData = [];
    data.forEach((row, index) => {
      const isDuplicate = existingData.some(existingRow => {
        // Сравниваем только по тексту (второй элемент) - игнорируем время
        return existingRow[1] === row[1];
      });
      
      if (!isDuplicate) {
        console.log('Добавляем новую строку:', row);
        newData.push(row);
      } else {
        console.log('Пропускаем дубликат по тексту:', row[1]);
      }
    });
    
    // Добавляем только новые данные
    if (newData.length > 0) {
      const lastRow = sheet.getLastRow() + 1;
      console.log('Добавляем', newData.length, 'новых записей начиная со строки:', lastRow);
      newData.forEach((row, index) => {
        sheet.getRange(lastRow + index, 1, 1, 4).setValues([row]);
      });
    } else {
      console.log('Все записи уже существуют, дубликаты не добавлены');
    }
    
    console.log('Обработка завершена');
    return ContentService.createTextOutput(JSON.stringify({
      success: true, 
      added: newData.length, 
      skipped: data.length - newData.length
    }))
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders({
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
      });
      
  } catch (error) {
    console.error('Ошибка в doPost:', error);
    return ContentService.createTextOutput(JSON.stringify({
      success: false, 
      error: error.toString()
    }))
      .setMimeType(ContentService.MimeType.JSON)
      .setHeaders({
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type'
      });
  }
}

function doGet(e) {
  return ContentService.createTextOutput(JSON.stringify({
    message: 'Google Apps Script работает!',
    timestamp: new Date().toISOString()
  }))
    .setMimeType(ContentService.MimeType.JSON)
    .setHeaders({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type'
    });
}

function doOptions(e) {
  return ContentService.createTextOutput('')
    .setHeaders({
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type'
    });
}
